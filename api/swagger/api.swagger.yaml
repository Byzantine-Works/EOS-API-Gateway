swagger: "2.0"
info:
  version: "2.0.1"
  title: "Byzanti.ne API Gateway - Powered by Liberty Block"
# during dev, should point to your local machine
host: api.byzanti.ne
# basePath prefixes all resource paths
basePath: /
securityDefinitions:
  # X-API-Key: abcdef12345
  APIKeyQueryParam:
    type: apiKey
    in: query
    name: api_key
  APIKeyHeaderParam:
    type: apiKey
    in: header
    name: api_key
  # APIKeyCookieParam:
  #   type: apiKey
  #   in: cookie
  #   name: api_key
schemes:
  # tip: remove http to make production-grade
  - https
# format of bodies a client can send (Content-Type)
consumes:
  - application/json
# format of the responses to the client (Accepts)
produces:
  - application/json

# Global security (applies to all operations):
security:
  - APIKeyQueryParam: []
  - APIKeyHeaderParam: []
  # - APIKeyCookieParam: []
paths:
  /info:
    # binds a127 app logic to a route
    x-swagger-router-controller: info
    get:
      tags:
        - Base API {account,tokens,transaction,actions}
      description: Returns 'info' of the node to the calling application
      # used as the method name of the controller
      operationId: info
      # parameters:
      #   - name: api_key
      #     in: header
      #     type: string
      #     required: true
      responses:
        "200":
          description: Success
          schema:
            # a pointer to a definition
            $ref: "#/definitions/infoResponse"
        # responses may fall through to errors
        "400":
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /tokens:
    x-swagger-router-controller: tokens
    get:
      tags:
        - Base API {account,tokens,transaction,actions}
      description: Returns All *legit EOS Derivative Tokens Airdropped, Airgrabbed and ICO'd with an operational contract,symbol
      operationId: tokens
      # parameters:
      # - ({none})
      #  in: query
      #    description: Retrieve a list of all EOS derivative tokens
      #    required: false
      #    type: string
      responses:
        "200":
          description: Success
          schema:
            # a pointer to a definition
            $ref: "#/definitions/tokenResponse"
        # responses may fall through to errors
        "400":
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /symbols:
    x-swagger-router-controller: dsymbols
    get:
      tags:
        - DEX API {symbols,ticker,orders,orderbook,orderbooktick,exdeposit,exwithdraw,makeorder,takeorder,extrade}
      description: Returns All *legit EOS Derivative Token Pairs for Trading DEX
      operationId: symbols
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/symbolResponse"
        "400":
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /ticker:
    x-swagger-router-controller: dticker
    get:
      tags:
        - DEX API {symbols,ticker,orders,orderbook,orderbooktick,exdeposit,exwithdraw,makeorder,takeorder,extrade}
      description: Returns ticker of all tradable EOS Derivative Token Pairs on DEX
      operationId: ticker
      parameters:
        - in: query
          name: symbol
          required: false
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/tickerResponse"
        "400":
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /orders:
    x-swagger-router-controller: dorders
    get:
      tags:
        - DEX API {symbols,ticker,orders,orderbook,orderbooktick,exdeposit,exwithdraw,makeorder,takeorder,extrade}
      description: Returns order books for a given symbol on DEX
      operationId: orders
      parameters:
        - in: query
          name: symbol
          required: true
          type: string
        - in: query
          name: side
          required: true
          type: string
        - in: query
          name: size
          required: true
          type: integer
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/ordersResponse"
        "400":
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /orderMake:
    x-swagger-router-controller: dordermake
    post:
      tags:
        - DEX API {symbols,ticker,orders,orderbook,orderbooktick,exdeposit,exwithdraw,makeorder,takeorder,extrade}
      description: Adds a new Order for a given symbol on DEX
      operationId: ordermake
      parameters:
        - name: body
          in: body
          description: Body should encapsulate {side=BUY/SELL side}, {assetBuy}, {assetSell},{amountBuy},{amountSell},{expires},{type =1/2 for market/limit},{useraccount},{hash}}
          required: true
          schema:
            properties:
              side:
                type: string
              assetBuy:
                type: string
              assetSell:
                type: string
              amountBuy:
                type: number
              amountSell:
                type: number
              price:
                type: number
              expires:
                type: string
              type:
                type: integer
              useraccount:
                type: string
              hash:
                type: string
              makerSignature:
                type: string              
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/transferResponse"
        "400":
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /orderTake:
    x-swagger-router-controller: dordertake
    post:
      tags:
        - DEX API {symbols,ticker,orders,orderbook,orderbooktick,exdeposit,exwithdraw,makeorder,takeorder,extrade}
      description: Take(buy/sell) an order for a given symbol on DEX
      operationId: ordertake
      parameters:
        - name: body
          in: body
          description: Body should encapsulate {orderId}, {assetBuy}, {assetSell},{amountBuy},{amountSell},{price},{taker},{maker},{takerExchange},{makerExchange},{tradehash}
          required: true
          schema:
            properties:
              orderId:
                type: string
              assetBuy:
                type: string
              assetSell:
                type: string
              amountBuy:
                type: number
              amountSell:
                type: number
              price:
                type: number
              taker:
                type: string
              maker:
                type: string
              takerExchange:
                type: string
              makerExchange:
                type: string
              hash:
                type: string
              takerSignature:
                type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/transferResponse"
        "400":
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /orderCancel:
    x-swagger-router-controller: dordercancel
    post:
      tags:
        - DEX API {symbols,ticker,orders,orderbook,orderbooktick,exdeposit,exwithdraw,makeorder,takeorder,extrade}
      description: Cancels an existing Order on DEX
      operationId: ordercancel
      parameters:
        - name: body
          in: body
          description: Body should encapsulate {orderId}, {orderHash}}
          required: true
          schema:
            properties:
              orderId:
                type: string
              orderHash:
                type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/transferResponse"
        "400":
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /ordersByUser:
    x-swagger-router-controller: dordersbyuser
    get:
      tags:
        - DEX API {symbols,ticker,orders,orderbook,orderbooktick,exdeposit,exwithdraw,makeorder,takeorder,extrade}
      description: Returns orders by user account on DEX
      operationId: ordersbyuser
      parameters:
        - in: query
          name: user
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/balanceResponse"
        "400":
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /orderById:
    x-swagger-router-controller: dorderbyid
    get:
      tags:
        - DEX API {symbols,ticker,orders,orderbook,orderbooktick,exdeposit,exwithdraw,makeorder,takeorder,extrade}
      description: Returns order by a given orderId on DEX
      operationId: orderbyid
      parameters:
        - in: query
          name: orderId
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/orderByIdResponse"
        "400":
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /orderbook:
    x-swagger-router-controller: dorderbook
    get:
      tags:
        - DEX API {symbols,ticker,orders,orderbook,orderbooktick,exdeposit,exwithdraw,makeorder,takeorder,extrade}
      description: Returns order books for a given symbol on DEX
      operationId: orderbook
      parameters:
        - in: query
          name: symbol
          required: true
          type: string
        - in: query
          name: size
          required: true
          type: integer
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/orderBookResponse"
        "400":
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /tradebook:
    x-swagger-router-controller: dtradebook
    get:
      tags:
        - DEX API {symbols,ticker,orders,orderbook,orderbooktick,exdeposit,exwithdraw,makeorder,takeorder,extrade}
      description: Returns trade book for a given symbol on DEX
      operationId: tradebook
      parameters:
        - in: query
          name: symbol
          required: true
          type: string
        - in: query
          name: size
          required: true
          type: integer
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/tradesResponse"
        "400":
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /orderbooktick:
    x-swagger-router-controller: dorderbooktick
    get:
      tags:
        - DEX API {symbols,ticker,orders,orderbook,orderbooktick,exdeposit,exwithdraw,makeorder,takeorder,extrade}
      description: Ticksize based return of order book price aggregation for a given symbol on DEX
      operationId: orderbooktick
      parameters:
        - in: query
          name: symbol
          required: true
          type: string
        - in: query
          name: ticksize
          required: true
          type: number
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/orderBookResponse"
        "400":
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /exdeposit:
    x-swagger-router-controller: ddeposit
    post:
      tags:
        - DEX API {symbols,ticker,orders,orderbook,orderbooktick,exdeposit,exwithdraw,makeorder,takeorder,extrade}
      description: Deposit EOS DACs to the exchange account {from account}  {amount as extended asset}
      operationId: deposit
      parameters:
        - name: body
          in: body
          description: Body should encapsulate {from=Account to transfer from}, {amount=amout to transfer such as 1.0000 EOS or 1.000 IQ}}
          required: true
          schema:
            properties:
              from:
                type: string
              amount:
                type: string
              sig:
                type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/transferResponse"
        "400":
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: Error
          schema:
            $ref: "#/definitions/TransferErrorResponse"
  /exwithdraw:
    x-swagger-router-controller: dwithdraw
    post:
      tags:
        - DEX API {symbols,ticker,orders,orderbook,orderbooktick,exdeposit,exwithdraw,makeorder,takeorder,extrade}
      description: Withdraw EOS DACs from the exchange account {from user account}  {amount as extended asset}
      operationId: withdraw
      parameters:
        - name: body
          in: body
          description: Body should encapsulate {from=Account to transfer from}, {amount=amout to transfer such as 1.0000 EOS or 1.000 IQ}}
          required: true
          schema:
            properties:
              from:
                type: string
              amount:
                type: string
              sig:
                type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/transferResponse"
        "400":
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: Error
          schema:
            $ref: "#/definitions/TransferErrorResponse"
  /exwithdrawscatter:
    x-swagger-router-controller: dwithdrawscatter
    post:
      tags:
        - DEX API {symbols,ticker,orders,orderbook,orderbooktick,exdeposit,exwithdraw,makeorder,takeorder,extrade}
      description: Withdraw EOS/DACs from the exchange account.
      operationId: withdrawscatter
      parameters:
        - name: body
          in: body
          description: Body should encapsulate {user=account withdrawing}, {amount=amout to withdraw such as 1.0000 EOS or 1.000 IQ},{token=token symbol to withdraw},{nonce=unique nonce to prevent replays},{headers= scatter headers},{signature=sig captured via scatter}}
          required: true
          schema:
            properties:
              user:
                type: string
              token:
                type: string
              amount:
                type: number
              nonce:
                type: integer
              headers:
                type: object                
              signature:
                type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/transferResponse"
        "400":
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: Error
          schema:
            $ref: "#/definitions/TransferErrorResponse"
  /exnonce:
    x-swagger-router-controller: dnonce
    get:
      tags:
        - DEX API {symbols,ticker,orders,orderbook,orderbooktick,exdeposit,exwithdraw,makeorder,takeorder,extrade}
      description: Returns user nonce on the exchange
      operationId: nonce
      parameters:
        - in: query
          name: account
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/exnonceResponse"
        "400":
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /exbalance:
    x-swagger-router-controller: dbalance
    get:
      tags:
        - DEX API {symbols,ticker,orders,orderbook,orderbooktick,exdeposit,exwithdraw,makeorder,takeorder,extrade}
      description: Returns exchange balances of EOS Derivative Tokens on DEX
      operationId: balance
      parameters:
        - in: query
          name: account
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/exBalanceResponse"
        "400":
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /balance:
    x-swagger-router-controller: dchainbalance
    get:
      tags:
        - DEX API {symbols,ticker,orders,orderbook,orderbooktick,exdeposit,exwithdraw,makeorder,takeorder,extrade}
      description: Returns the user accounts balances on the chain
      operationId: chainbalance
      parameters:
        - in: query
          name: account
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/chainbalanceResponse"
        "400":
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /exchanges:
    x-swagger-router-controller: dexchanges
    get:
      tags:
        - DEX API {symbols,ticker,orders,orderbook,orderbooktick,exdeposit,exwithdraw,makeorder,takeorder,extrade}
      description: Returns exchanges enabled on the LDAR platform
      operationId: exchanges
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/exchangesResponse"
        "400":
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /tokensByAccount/{account}:
    x-swagger-router-controller: tokensByAccount
    get:
      tags:
        - Base API {account,tokens,transaction,actions}
      description: Returns All EOS and Derivative Tokens Airdropped, Airgrabbed and ICO'd that a user has in his account
      operationId: tokensByAccount
      parameters:
        - name: account
          in: path
          required: true
          type: string
        # Operation-specific security:
        # security:
        #   - APIKeyQueryParam: []
        # ##
        # security:
        #   - APIKeyHeader: []
        ##
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/tokensByAccountResponse"
        "400":
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /transfer:
    x-swagger-router-controller: transfer
    post:
      tags:
        - Transfer API {EOS & Derivative Tokens}
      description: Returns transaction response to transfer on-chain action {from account} {to account} {amount} {memo}
      operationId: transfer
      parameters:
        # - name: api_key
        #   in: query
        #   type: string
        #   description: String api_key
        - name: body
          in: body
          description: Body should encapsulate {from=Account to transfer from}, {to=Account to transfer to}, {amount=amout to transfer such as 1.0000 EOS or 1.0000 IQ},{memo=memo for the transfer which is a string such as 'UUID' or 'deposit into exchange for 78934'}
          required: true
          schema:
            properties:
              from:
                type: string
              to:
                type: string
              amount:
                type: string
              memo:
                type: string
              sig:
                type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/transferResponse"
        "400":
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: Error
          schema:
            $ref: "#/definitions/TransferErrorResponse"
  /transferWithScatter:
    x-swagger-router-controller: transferWithScatter
    post:
      tags:
        - Transfer API {EOS & Derivative Tokens}
      description: Returns transaction response to transfer on-chain action {from account} {to account} {amount} {memo} {sig} {transactionHeaders}
      operationId: transferWithScatter
      parameters:
        - name: body
          in: body
          description: Body should encapsulate {from=Account to transfer from}, {to=Account to transfer to}, {amount=amout to transfer such as 1.0000 EOS or 1.0000 IQ},{memo=memo for the transfer which is a string such as 'UUID' or 'deposit into exchange for 78934'}, {sig=scatter signed arbitrary signature + nonce}, {transactionHeaders}
          required: true
          schema:
            properties:
              from:
                type: string
              to:
                type: string
              amount:
                type: string
              memo:
                type: string
              sig:
                type: string
              transactionHeaders:
                type: object
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/transferResponse"
        "400":
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: Error
          schema:
            $ref: "#/definitions/TransferErrorResponse"
  /transaction/{id}:
    x-swagger-router-controller: getTransaction
    get:
      tags:
        - Base API {account,tokens,transaction,actions}
      description: Returns transaction details of a previously executed on-chain transaction. Used to validate with certainty successfull completion, and or reversed transaction.
      operationId: getTransaction
      parameters:
        - name: id
          in: path
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/transferResponse"
        "400":
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /getAccount/{account}:
    x-swagger-router-controller: getAccount
    get:
      tags:
        - Base API {account,tokens,transaction,actions}
      description: Returns EOS blockchain account details including avail or staked RAM, CPU.
      operationId: getAccount
      parameters:
        - name: account
          in: path
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/transferResponse"
        "400":
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /getCurrencyStats:
    x-swagger-router-controller: getCurrencyStats
    get:
      tags:
        - Base API {account,tokens,transaction,actions}
      description: Returns currency stats for a given tokencontract and symbol.
      operationId: getCurrencyStats
      parameters:
        - in: query
          name: contract
          required: true
          type: string
        - in: query
          name: symbol
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/transferResponse"
        "400":
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /getActions:
    x-swagger-router-controller: getActions
    get:
      tags:
        - Base API {account,tokens,transaction,actions}
      description: Returns actions the given account partook in along with the transaction details. Use pos and offset as a cursor to navigate the items.
      operationId: getActions
      parameters:
        - in: query
          name: account
          required: true
          type: string
        - in: query
          name: pos
          required: false
          type: integer
        - in: query
          name: offset
          required: false
          type: integer
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/transferResponse"
        "400":
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /getRefunds/{account}:
    x-swagger-router-controller: getRefunds
    get:
      tags:
        - Base API {account,tokens,transaction,actions}
      description: Returns refunds on a given account.
      operationId: getRefunds
      parameters:
        - in: path
          name: account
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/transferResponse"
        "400":
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /getNameBids/{account}:
    x-swagger-router-controller: getNameBids
    get:
      tags:
        - Base API {account,tokens,transaction,actions}
      description: Returns Name Bids on a given account.
      operationId: getNameBids
      parameters:
        - in: path
          name: account
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/transferResponse"
        "400":
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /getKeyset:
    x-swagger-router-controller: getKeyset
    get:
      tags:
        - Base API {account,tokens,transaction,actions}
      description: Returns a public/private key pairs. You need 2 pairs for account creation. these are owner keypair and active keypair. Although you can use the same keypair for both owner and active, it is not recommended.
      operationId: getKeyset
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/transferResponse"
        "400":
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /createAccount:
    x-swagger-router-controller: createAccount
    post:
      tags:
        - Base API {account,tokens,transaction,actions}
      description: Create an EOS Account
      operationId: createAccount
      parameters:
        - name: body
          in: body
          description: Body should encapsulate {creator=EOS account name creating the account}, {name=name of the account being created},{owner=Owner Public key},{active=Active Public key},{sig=account creator signature}
          required: true
          schema:
            properties:
              creator:
                type: string
              name:
                type: string
              owner:
                type: string
              active:
                type: string
              sig:
                type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/transferResponse"
        "400":
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: Error
          schema:
            $ref: "#/definitions/TransferErrorResponse"
  /getProducers:
    x-swagger-router-controller: getProducers
    get:
      tags:
        - Block Producer API {Producer List, Voting, Delegate, Undelegate, Buy/sell RAM & get RAM price}
      description: Returns the list of 21 producers.
      operationId: getProducers
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/transferResponse"
        "400":
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /voteProducer:
    x-swagger-router-controller: voteProducer
    post:
      tags:
        - Block Producer API {Producer List, Voting, Delegate, Undelegate, Buy/sell RAM & get RAM price}
      description: Lets you vote for a specific producer account
      operationId: voteProducer
      parameters:
        - name: body
          in: body
          description: Body should encapsulate {voter=Account to transfer from}, {producer=comma seperated values of producers to vote for},{sig=voter signature}
          required: true
          schema:
            properties:
              voter:
                type: string
              producer:
                type: string
              sig:
                type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/transferResponse"
        "400":
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: Error
          schema:
            $ref: "#/definitions/TransferErrorResponse"
  /delegate:
    x-swagger-router-controller: delegate
    post:
      tags:
        - Block Producer API {Producer List, Voting, Delegate, Undelegate, Buy/sell RAM & get RAM price}
      description: Delegate specific NET and CPU bandwidth for a user
      operationId: delegate
      parameters:
        - name: body
          in: body
          description: Body should encapsulate {from=account delegating bandwidth}, {receiver=account to delegate bandwidth to},{net=amount of EOS to undelegate for network bandwidth},{cpu=amount of EOS to undelegate for CPU bandwidth},{sig=voter signature}
          required: true
          schema:
            properties:
              from:
                type: string
              receiver:
                type: string
              net:
                type: string
              cpu:
                type: string
              sig:
                type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/transferResponse"
        "400":
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: Error
          schema:
            $ref: "#/definitions/TransferErrorResponse"
  /undelegate:
    x-swagger-router-controller: undelegate
    post:
      tags:
        - Block Producer API {Producer List, Voting, Delegate, Undelegate, Buy/sell RAM & get RAM price}
      description: Undelegate specific NET and CPU bandwidth
      operationId: undelegate
      parameters:
        - name: body
          in: body
          description: Body should encapsulate {from=account undelegating bandwidth}, {receiver=account to undelegate bandwidth from},{net=amount of EOS to undelegate for network bandwidth},{cpu=amount of EOS to undelegate for CPU bandwidth},{sig=voter signature}
          required: true
          schema:
            properties:
              from:
                type: string
              receiver:
                type: string
              net:
                type: string
              cpu:
                type: string
              sig:
                type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/transferResponse"
        "400":
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: Error
          schema:
            $ref: "#/definitions/TransferErrorResponse"
  /getBandwidth/{account}:
    x-swagger-router-controller: getBandwidth
    get:
      tags:
        - Block Producer API {Producer List, Voting, Delegate, Undelegate, Buy/sell RAM & get RAM price}
      description: Returns account bandwidth staked in EOS for network and cpu.
      operationId: getBandwidth
      parameters:
        - name: account
          in: path
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/transferResponse"
        "400":
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /buyRam:
    x-swagger-router-controller: buyRam
    post:
      tags:
        - Block Producer API {Producer List, Voting, Delegate, Undelegate, Buy/sell RAM & get RAM price}
      description: Buy Ram
      operationId: buyRam
      parameters:
        - name: body
          in: body
          description: Body should encapsulate {payer=account paying for RAM}, {receiver=account receiving RAM},{quant=amount of EOS to pay for RAM},{sig=payer signature}
          required: true
          schema:
            properties:
              payer:
                type: string
              receiver:
                type: string
              quant:
                type: string
              sig:
                type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/transferResponse"
        "400":
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: Error
          schema:
            $ref: "#/definitions/TransferErrorResponse"
  /buyRamBytes:
    x-swagger-router-controller: buyRamBytes
    post:
      tags:
        - Block Producer API {Producer List, Voting, Delegate, Undelegate, Buy/sell RAM & get RAM price}
      description: Buy Ram in specified bytes
      operationId: buyRamBytes
      parameters:
        - name: body
          in: body
          description: Body should encapsulate {payer=account paying for RAM}, {receiver=account receiving RAM},{bytes=RAM in bytes},{sig=payer signature}
          required: true
          schema:
            properties:
              payer:
                type: string
              receiver:
                type: string
              bytes:
                type: integer
              sig:
                type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/transferResponse"
        "400":
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: Error
          schema:
            $ref: "#/definitions/TransferErrorResponse"
  /sellRamBytes:
    x-swagger-router-controller: sellRamBytes
    post:
      tags:
        - Block Producer API {Producer List, Voting, Delegate, Undelegate, Buy/sell RAM & get RAM price}
      description: Sell Ram in specified bytes
      operationId: sellRamBytes
      parameters:
        - name: body
          in: body
          description: Body should encapsulate {account=account selling RAM},{bytes=RAM in bytes},{sig=payer signature}
          required: true
          schema:
            properties:
              account:
                type: string
              bytes:
                type: integer
              sig:
                type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/transferResponse"
        "400":
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
        "401":
          description: Error
          schema:
            $ref: "#/definitions/TransferErrorResponse"
  /getRamPrice:
    x-swagger-router-controller: getRamPrice
    get:
      tags:
        - Block Producer API {Producer List, Voting, Delegate, Undelegate, Buy/sell RAM & get RAM price}
      description: Returns RAM prices based on supply/quote and the Bancor algorithm
      operationId: getRamPrice
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/transferResponse"
        "400":
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /swagger:
    x-swagger-pipe: swagger_raw
# complex objects have schema definitions
definitions:
  orderBookResponse:
    properties:
      asks:
        type: array
        items:
          type: object
      bids:
        type: array
        items:
          type: object
  exnonceResponse:
    properties:
      nonce:
        type: integer
      account:
        type: string
  infoResponse:
    properties:
      server_version:
        type: string
      chain_id:
        type: string
      head_block_num:
        type: integer
      last_irreversible_block_num:
        type: integer
      last_irreversible_block_id:
        type: string
      head_block_producer:
        type: string
      virtual_block_cpu_limit:
        type: integer
      virtual_block_net_limit:
        type: integer
      block_cpu_limit:
        type: integer
      block_net_limit:
        type: integer
  ErrorResponse:
    properties:
      error:
        type: string
  TransferErrorResponse:
    properties:
      error:
        type: string
  tokenResponse:
    type: array
    items:
      type: object
      example:
        {
          symbol: IQ,
          contract: everipediaiq,
          precision: 3,
          name: Everipedia,
          hash: 42206a89a3873c8b15bda5178ca0e2da6b223597177bc9abe3980c43c860e3fa,
        }
  symbolResponse:
    type: array
    items:
      type: object
      example:
        {
          tradingpair: iq_eos,
          contract: everipediaiq,
          symbol: IQ,
          price_precision: 5,
          currency_precision: 3,
        }
  balanceResponse:
    type: array
    items:
      type: object
      example:
        {
          orderId: 7eBZmmYBJNEeaSKiV4yG,
          user: reddy,
          symbol: IQ,
          amount: 7.9992,
          confirmed: 1,
          created: 2018-10-22 05:57:18,
          updated: 2018-10-22 06:00:58,
          timestamp: 1540188058,
        }
  chainbalanceResponse:
    type: array
    items:
      type: string
  exchangesResponse:
    type: array
    items:
      type: object
      example:
        {
          exchangeId: -RsJv2YBuQ5feLjDFJyC,
          name: UberDEX,
          makerfee: 0.01,
          takerfee: 0.02,
          created: 2018-10-22 05:57:18,
          updated: 2018-10-22 06:00:58,
          timestamp: 1540188058,
        }
  exBalanceResponse:
    type: array
    items:
      type: object
      example:
        {
          account: maker1,
          token: 3 IQ@everipediaiq,
          amount: 7,
        }
  orderByIdResponse:
    type: object
    items:
      type: object
      example:
        {
          orderId: 7eBZmmYBJNEeaSKiV4yG,
          user: reddy,
          symbol: IQ,
          amount: 7.9992,
          confirmed: 1,
          created: 2018-10-22 05:57:18,
          updated: 2018-10-22 06:00:58,
          timestamp: 1540188058,
        }
  tickerResponse:
    type: array
    items:
      type: object
      example:
        {
          symbol: IQ,
          contract: everipediaiq,
          tradingpair: eos_iq,
          last: 0.00178,
          change: 0,
          high: 0.00188,
          low: 0.00173,
          amount: 1210563.5455,
          volume: 2182982.0000,
        }
  ordersResponse:
    type: array
    items:
      type: object
      example:
        {
          source: UberDEX,
          price: 0.0018647,
          side: BUY,
          chain: EOS,
          assetBuy: IQ,
          assetSell: 0.4294,
          amountBuy: 230.239,
          amountSell: 0.4294,
          expires: 1d,
          type: 2,
          hash: cf583f7ef02852845247953b45f8abce4ea7e134,
          useraccount: randomgooppy,
          filled: 2,
          cancelled: 2,
          new: 2,
          created: 2018-10-17 13:24:21,
          updated: 2018-10-17 14:59:11,
          feediscount: 2,
          timestamp: 1539813551,
          orderId: mw6FvmYBuQ5feLjDKeCp
        }
  tradesResponse:
    type: array
    items:
      type: object
      example:
        {
          chain: EOS,
          assetBuy: IQ,
          assetSell: EOS,
          amountBuy: 230.239,
          amountSell: 0.4294,
          price: 0.0018747,
          type: 2,
          hash: cf583f7ef02852845247953b45f8abce4ea7e134,
          maker: randomgooppy,
          taker: g4ydemjzhage,
          makerExchange: "UberDEX",
          takerExchange: "MBAEX",
          makerFee: 0.01,
          takerFee: 0.02,
          created: 2018-10-17 13:24:21,
          updated: 2018-10-17 14:59:11,
          feediscount: 2,
          timestamp: 1540799349,
          tradeId: IhHLvmYBuQ5feLjDanCS
        }
  tokensByAccountResponse:
    type: array
    items:
      type: object
      example:
        {
          account: gi3dcnjshege,
          contract: everipediaiq,
          symbol: IQ,
          balance: 824.365,
          precision: 3,
          hash: 42206a89a3873c8b15bda5178ca0e2da6b223597177bc9abe3980c43c860e3fa,
        }
  transferResponse:
    type: object
    items:
      type: object
      example: { object: value }
